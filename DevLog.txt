Decidí empezar un devlog para ir anotando información que crea relevante al proyecto, que queden registrados los cambios que hago y su propósito

- 2/5/2022

Mi código tiene: 
* La memoria como 65000~ bytes (*8bits) en un array
* 7 registros de 8bits
* SP y PC de 16bits

No tiene sentido que el PC y SP sean de 16bits porque siempre voy a estar direccionando a 8 en mi implementación de la memoria
La arquitectura original permite direccionar a 16 bits
Tengo que tomar elegir si quiero emular el procesador como a mi me parezca lógico o como su arquitectura lo indica

Por ahora voy a seguir con mi implementación solo que cambiando SP y PC a 8bits para que tenga más sentido.
Voy a estar ahorrando 2 bytes (32bits - 16bits) pero la verdad es que el procesador es tan simple en términos modernos que esos 2bytes son depreciables.

Problemas {

	*Cuando hago CALL y guardo el PC siguiente en el stack, se guarda como viene (PC = dc --> SP = dc)
	yo quiero guardarlo invertido por el endianess (PC = dc --> SP = cd)

	~Cuando hablo de PC estoy hablando directamente de la dirección a la que debería volver, osea PC + 3

	-> Encontré una página que invierte números en hexa, debería copiar lo que hace para guardarlo como quiero
	https://onlinehextools.com/reverse-hex-digits

	-> Lo pensé mal, tenía que acceder a MEMORY[PC + 3] y eso me daba CD para guardarlo en MEMORY[SP]
	   que el PC fuera 18dc y yo estuviera agarrando el dc fue una "coincidencia"

	-> Como solo puedo direccionar a byte en mi implementación tenía que guardar PC en MEMORY[SP] el primer byte
	   y (PC >> 8) en MEMORY[SP + 1]

	*Debería codear que no se pueda escribir en la memoria en el rango de [0, 2000) ya que esa es memoria de solo lectura
	
	
}

Cambié el SP a un puntero porque me parecía que tenía mas sentido, ahora es necesario castear como puntero cuando le asigno algo
o como int cuando quiero usarlo como un argumento para MEMORIA[]

 - 3/5/2022

Borré todos los branches
Logré arreglar todos los bugs de CALL y RET
El problema era que SP arrancaba en $2400 y yo lo implemente hacia arriba, cuando [$2400 -> ...] son las direcciones para la pantalla
entonces cuando hacia clearScreen borraba la pila. Lo arreglé implementando la pila hacia abajo.
Es decir, cuando pusheo tengo que hacerlo a MEMORY[SP - 1]. 
Como yo tengo implementada MEMORY en BYTES cuando pusheo tengo que hacerlo a SP-1 y SP-2
Ahora viene una parte importante que es la de INPUTS Y OUTPUTS
Estoy averiguando que hace la instrucción EX (OPCODE: 0xeb)
